{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Open_Source_Checklist/","title":"The Open Source Checklist","text":""},{"location":"Open_Source_Checklist/#about","title":"About","text":"<p>It's easy to overlook important tasks when releasing and maintaining an open source project. This checklist helps ensure your project follows best practices for health, development, and security.</p> <p>Use this checklist as a discussion starter for your team and a foundation for continuous improvement.</p>"},{"location":"Open_Source_Checklist/#archiving-and-deprecating-a-project","title":"Archiving and Deprecating a Project","text":"<ul> <li>Should use the platform's \"Archival\" function. This way, it becomes read-only, including the issues board, and is flagged as inactive.</li> <li>Should state in the README that the project is no longer maintained.</li> <li>Should be archived if there are no maintainers.</li> </ul>"},{"location":"Open_Source_Checklist/#documentation","title":"Documentation","text":"<ul> <li> <p>Must ensure the project includes standard Community Health Files (CHANGELOG, CONTRIBUTING, CODE_OF_CONDUCT, etc.).   See the README.md Template Files section for a complete list.</p> </li> <li> <p>Should include usage documentation and architecture descriptions relevant to the project.</p> </li> </ul>"},{"location":"Open_Source_Checklist/#legal-and-licensing","title":"Legal and Licensing","text":"<ul> <li>Must ensure the project's license doesn't conflict with third-party licenses.</li> <li>License declarations must follow the REUSE licensing specification, ensuring all materials have clear copyright information.</li> </ul>"},{"location":"Open_Source_Checklist/#naming-and-trademarks-check","title":"Naming and Trademarks Check","text":"<ul> <li>Should ensure that the project name does not conflict with an existing project or infringe on trademarks.</li> <li>Conduct a general search engine check for the proposed project name.</li> <li>Perform a Trademark Search.</li> </ul> <p>Note: It might be perfectly acceptable to use a name reminiscent of an existing trademark - if the existing trademark is used for other services/areas and is not recognized as a well-known trademark.</p>"},{"location":"Open_Source_Checklist/#people-maintenance","title":"People &amp; Maintenance","text":"<ul> <li>Must ensure maintainers have education or experience with open source. For example, reading guides at https://opensource.guide.</li> <li>Must ensure maintainers have a plan for handling merge/pull requests (code reviews, etc.).</li> <li>Must ensure maintainers have a plan for community engagement (responding to issues, reviewing pull requests).</li> <li>Must ensure someone is responsible for security issues.</li> <li> <p>Must include a <code>Maintainer</code> section in every project README (team, individual, or role).</p> </li> <li> <p>Should establish a release plan with clear announcement and promotion strategies.</p> </li> <li>Should use a CODEOWNERS file for granular maintenance descriptions (complementing the README's general Maintainer section).</li> </ul>"},{"location":"Open_Source_Checklist/#project-quality","title":"Project Quality","text":"<ul> <li>Must verify that the project has undergone a code review.</li> <li>Should discuss and establish the project's testing goals and ambitions.</li> <li>Should make it easy to use the project - documentation, examples, pre-built releases, etc.</li> </ul>"},{"location":"Open_Source_Checklist/#release-and-versioning","title":"Release and Versioning","text":"<ul> <li>Should use Semantic Versioning 2.0.0 and release tags.</li> </ul>"},{"location":"Open_Source_Checklist/#security","title":"Security","text":"<p>This part of the checklist is based on the Open Source Security Foundation (OpenSSF) guide for more secure open source development, version: 2023-06-14, (and companion post).</p>"},{"location":"Open_Source_Checklist/#general","title":"General","text":"<ul> <li>Must use two-factor authentication (2FA) or multifactor authentication (MFA) to make it harder for account takeovers.</li> <li>Must limit merge and push rights to specific branches.</li> <li>Must have enabled branch protection.</li> <li> <p>Must have a practice of signed commits.</p> </li> <li> <p>Should have a basic knowledge of committers and maintainers, and must do a periodic review of those.</p> </li> <li>Should have automated testing and test coverage practices, including tests for negative cases, to detect bugs and secure the project.</li> </ul>"},{"location":"Open_Source_Checklist/#contribution","title":"Contribution","text":"<ul> <li>Should have a practice of code reviews.</li> <li>Should have good readability and scope requirements to ensure new PRs are not obfuscated, and use of opaque binaries is minimized.</li> </ul>"},{"location":"Open_Source_Checklist/#dependencies-and-vulnerabilities-detection","title":"Dependencies and Vulnerabilities Detection","text":"<ul> <li>Must use SCA-tools in the CI pipeline to detect vulnerabilities and license incompatibilities.</li> <li>Must use linter tools in the CI pipeline to detect vulnerabilities and bad development practices.</li> <li>Must use secret scanning tools to detect secrets (passwords, logs, tokens).</li> <li>Must use automated tooling to monitor dependency updates for critical vulnerabilities.</li> <li> <p>Must have maintenance to quickly handle updating vulnerabilities.</p> </li> <li> <p>Should use SAST-tools in the CI pipeline to detect potential vulnerabilities and bad software practices.</p> </li> <li>Should evaluate the health of every new direct project dependency that is added to the project.</li> <li>Should prefer using package managers (at the system, language, and container level) for automatic and consistent dependency updates.</li> </ul>"},{"location":"Open_Source_Checklist/#publishing","title":"Publishing","text":"<ul> <li>Must produce an SBOM (Software Bill of Materials) for the project so that end-users and systems can verify vulnerabilities and license incompatibilities.</li> <li> <p>Must limit software publishing rights of artifacts.</p> </li> <li> <p>Should sign any project releases.</p> </li> <li>Should make it easy for end-users to upgrade to new releases. Use semantic versioning, support stable APIs, and flag deprecation early.</li> </ul>"},{"location":"Open_Source_Checklist/#policy","title":"Policy","text":"<ul> <li>Must have a security policy in place - it should contain information about where to report non-disclosure vulnerabilities and the process regarding the report.</li> </ul> <p>Secure software practices and tooling from OpenSSF and OWASP:</p>"},{"location":"Open_Source_Checklist/#tooling","title":"Tooling","text":"<ul> <li>OpenSSF guide to security tools.</li> <li>OWASP Application Security Tools</li> <li>OpenSSF Scorecards for repository security</li> </ul>"},{"location":"Open_Source_Checklist/#guides","title":"Guides","text":"<ul> <li>OpenSSF's Concise Guide for Evaluating Open Source Software</li> <li>CNCF Security TAG Software Supply Chain Best Practices guide.</li> <li>OWASP Cheatsheets.</li> <li>OWASP Software Developer Guide.</li> <li>Signing artifacts in the supply chain - OpenSSF sigstore project.</li> <li>OWASP Application Security Verification Standard - ASVS.</li> <li>Supply-chain Levels for Software Artifacts - (SLSA).</li> </ul>"},{"location":"Open_Source_Checklist/#workflows","title":"Workflows","text":"<ul> <li>May discuss your GitHub workflow - a brief summary and suggestion can be found in CONTRIBUTING - Pull Request Lifecycle</li> </ul>"},{"location":"Open_Source_Checklist/#specifications-and-standards-to-follow","title":"Specifications and Standards to Follow","text":"<p>The following will help your Open Source Project to be collaborative, reusable, accessible, and up-to-date.</p> <ul> <li>REUSE License specification</li> <li> <p>Ensures clear and standardized license compliance across the project.</p> </li> <li> <p>Conventional Commits format</p> </li> <li> <p>Provides a clear and structured project history through standardized commit messages.</p> </li> <li> <p>Keep-A-Changelog format</p> </li> <li> <p>Maintains a clear and user-friendly release history.</p> </li> <li> <p>Semantic Versioning 2.0.0</p> </li> <li> <p>Provides consistent version numbering for releases.</p> </li> <li> <p>Contributor Covenant guidelines</p> </li> <li> <p>Establishes a social contract for respectful and inclusive collaboration.</p> </li> <li> <p>OpenSSF Scorecard</p> </li> <li> <p>Helps assess and improve the security health of our project.</p> </li> <li> <p>PublicCode.yml</p> </li> <li> <p>Facilitates easy metadata indexing for better discoverability of our project.</p> </li> <li> <p>Standard for Public Code</p> </li> <li>Ensures the project meets criteria for public code quality and sustainability.</li> </ul>"}]}